((request(Post_form(uri https://www.reddit.com/api/v1/access_token)(headers((authorization <AUTHORIZATION>)))(params((grant_type(password))(username(<USERNAME>))(password(<PASSWORD>))))))(response(((encoding(Fixed 114))(headers((accept-ranges bytes)(cache-control"max-age=0, must-revalidate")(connection keep-alive)(content-length 114)(content-type"application/json; charset=UTF-8")(date"Sun, 23 Aug 2020 13:09:07 GMT")(server snooserv)(set-cookie"edgebucket=qP5DZ27hNXCUcLA2EO; Domain=reddit.com; Max-Age=63071999; Path=/;  secure")(strict-transport-security"max-age=15552000; includeSubDomains; preload")(via"1.1 varnish")(x-content-type-options nosniff)(x-frame-options SAMEORIGIN)(x-moose majestic)(x-xss-protection"1; mode=block")))(version HTTP_1_1)(status OK)(flush false))"{\"access_token\": \"<ACCESS_TOKEN>\", \"token_type\": \"bearer\", \"expires_in\": 3600, \"scope\": \"*\"}")))((request(Get(uri https://oauth.reddit.com/comments/hle3h4?raw_json=1)(headers((authorization"bearer <ACCESS_TOKEN>")))))(response(((encoding(Fixed 33686))(headers((accept-ranges bytes)(cache-control"private, s-maxage=0, max-age=0, must-revalidate, no-store, max-age=0, must-revalidate")(connection keep-alive)(content-length 33686)(content-type"application/json; charset=UTF-8")(date"Sun, 23 Aug 2020 13:09:07 GMT")(expires -1)(server snooserv)(set-cookie"session_tracker=eakniqqhjcpanorglj.0.1598188147180.Z0FBQUFBQmZRbXB6YlBJSS1XSnZyczJFMGpXaUg2cllXXy0zQW5hcnBuMlBFWFB4bWN3bl80Njc0Y2lMT0kxdklfZjBoOEIwQ1dPZU1MbXZXcklkdUljcjZteHBUWEJSVFNRcjBjSm5ESVNRY3AzWjVEUEVGajgyV0h4MzEwZUF1U0JwQldWbHotQTY; Domain=reddit.com; Max-Age=7199; Path=/; expires=Sun, 23-Aug-2020 15:09:07 GMT; secure; SameSite=None; Secure")(set-cookie"redesign_optout=true; Domain=reddit.com; Max-Age=94607999; Path=/; expires=Wed, 23-Aug-2023 13:09:07 GMT; secure")(set-cookie"csv=1; Max-Age=63072000; Domain=.reddit.com; Path=/; Secure; SameSite=None")(set-cookie"edgebucket=uCJAsWEsSRBGA8LIl3; Domain=reddit.com; Max-Age=63071999; Path=/;  secure")(strict-transport-security"max-age=15552000; includeSubDomains; preload")(vary accept-encoding)(via"1.1 varnish")(x-content-type-options nosniff)(x-frame-options SAMEORIGIN)(x-moose majestic)(x-ratelimit-remaining 599.0)(x-ratelimit-reset 53)(x-ratelimit-used 1)(x-ua-compatible IE=edge)(x-xss-protection"1; mode=block")))(version HTTP_1_1)(status OK)(flush false))"[{\"kind\": \"Listing\", \"data\": {\"modhash\": null, \"dist\": 1, \"children\": [{\"kind\": \"t3\", \"data\": {\"approved_at_utc\": null, \"subreddit\": \"ocaml\", \"selftext\": \"I\\u2019ll show a simple scenario in code.\\n\\n    type 'a tree = \\n      | Leaf \\n      | Node of 'a * 'a tree * 'a tree\\n    \\n    let test_tree = \\n      Node(4,\\n           Node(2,\\n                Node(1,Leaf,Leaf),\\n                Node(3,Leaf,Leaf)\\n               ),\\n           Node(5,\\n                Node(6,Leaf,Leaf),\\n                Node(7,Leaf,Leaf)\\n               )\\n          )\\n    \\n    (* test_tree as displayed in utop: \\n    val test_tree : int tree =\\n      Node (4, Node (2, Node (1, Leaf, Leaf), Node (3, Leaf, Leaf)),\\n       Node (5, Node (6, Leaf, Leaf), Node (7, Leaf, Leaf)))\\n     *)\\n\\nThe output in utop is not that readable. Not a huge problem for a small data structure like this, but\\u00a0with more complex structures, having good tree-printing would be especially desirable.\\n\\nI did searches with clauses like \\u201cOCaml pretty-printing tree data structures\\u201d, but everything I found was heavily tailored to pretty-printing source code specifically.\\n\\nOCaml is great at working with trees, and is heavily used in compilers and other language tech where trees are ***everywhere***. So surely there must be significant prior art for doing what I\\u2019m looking for here?\\n\\nI would be happy to rely for now on terminal-based tooling.\\n\\nBut another idea I had was to let an external tool like\\u00a0GraphViz do most of the work. The strategy would be:\\n\\n1. Traverse my intricate tree structure, building up a collection of edge and node records.\\n2. Serialize those edges and nodes into a string in the DOT language that GraphViz wants, something like\\u00a0\\\"digraph{4 -\\u003E 2; 4 -\\u003E 5; 2 -\\u003E 1; 2 -\\u003E 3; 5 -\\u003E 6; 5 -\\u003E 7}\\\" for the simple case above.\\n3. Pass that string to Graphviz to draw the graph.\\n\\n\\\\--------\\n\\nSo, do you folks have any suggestions about how to approach this topic of tree visualization?\", \"user_reports\": [], \"saved\": false, \"mod_reason_title\": null, \"gilded\": 0, \"clicked\": false, \"title\": \"OCaml is superbly suited to defining and processing tree-like structures. If I want to print or display a tree structure in a format that\\u2019s easy to interpret, what good tools and resources are available?\", \"link_flair_richtext\": [], \"subreddit_name_prefixed\": \"r/ocaml\", \"hidden\": false, \"pwls\": 6, \"link_flair_css_class\": null, \"downs\": 0, \"top_awarded_type\": null, \"parent_whitelist_status\": \"all_ads\", \"hide_score\": false, \"name\": \"t3_hle3h4\", \"quarantine\": false, \"link_flair_text_color\": \"dark\", \"upvote_ratio\": 0.96, \"author_flair_background_color\": null, \"subreddit_type\": \"public\", \"ups\": 20, \"total_awards_received\": 0, \"media_embed\": {}, \"author_flair_template_id\": null, \"is_original_content\": false, \"author_fullname\": \"t2_36453\", \"secure_media\": null, \"is_reddit_media_domain\": false, \"is_meta\": false, \"category\": null, \"secure_media_embed\": {}, \"link_flair_text\": null, \"can_mod_post\": false, \"score\": 20, \"approved_by\": null, \"author_premium\": false, \"thumbnail\": \"\", \"edited\": 1593911790.0, \"author_flair_css_class\": null, \"author_flair_richtext\": [], \"gildings\": {}, \"content_categories\": null, \"is_self\": true, \"mod_note\": null, \"created\": 1593939477.0, \"link_flair_type\": \"text\", \"wls\": 6, \"removed_by_category\": null, \"banned_by\": null, \"author_flair_type\": \"text\", \"domain\": \"self.ocaml\", \"allow_live_comments\": false, \"selftext_html\": \"\\u003C!-- SC_OFF --\\u003E\\u003Cdiv class=\\\"md\\\"\\u003E\\u003Cp\\u003EI\\u2019ll show a simple scenario in code.\\u003C/p\\u003E\\n\\n\\u003Cpre\\u003E\\u003Ccode\\u003Etype \\u0026#39;a tree = \\n  | Leaf \\n  | Node of \\u0026#39;a * \\u0026#39;a tree * \\u0026#39;a tree\\n\\nlet test_tree = \\n  Node(4,\\n       Node(2,\\n            Node(1,Leaf,Leaf),\\n            Node(3,Leaf,Leaf)\\n           ),\\n       Node(5,\\n            Node(6,Leaf,Leaf),\\n            Node(7,Leaf,Leaf)\\n           )\\n      )\\n\\n(* test_tree as displayed in utop: \\nval test_tree : int tree =\\n  Node (4, Node (2, Node (1, Leaf, Leaf), Node (3, Leaf, Leaf)),\\n   Node (5, Node (6, Leaf, Leaf), Node (7, Leaf, Leaf)))\\n *)\\n\\u003C/code\\u003E\\u003C/pre\\u003E\\n\\n\\u003Cp\\u003EThe output in utop is not that readable. Not a huge problem for a small data structure like this, but\\u00a0with more complex structures, having good tree-printing would be especially desirable.\\u003C/p\\u003E\\n\\n\\u003Cp\\u003EI did searches with clauses like \\u201cOCaml pretty-printing tree data structures\\u201d, but everything I found was heavily tailored to pretty-printing source code specifically.\\u003C/p\\u003E\\n\\n\\u003Cp\\u003EOCaml is great at working with trees, and is heavily used in compilers and other language tech where trees are \\u003Cstrong\\u003E\\u003Cem\\u003Eeverywhere\\u003C/em\\u003E\\u003C/strong\\u003E. So surely there must be significant prior art for doing what I\\u2019m looking for here?\\u003C/p\\u003E\\n\\n\\u003Cp\\u003EI would be happy to rely for now on terminal-based tooling.\\u003C/p\\u003E\\n\\n\\u003Cp\\u003EBut another idea I had was to let an external tool like\\u00a0GraphViz do most of the work. The strategy would be:\\u003C/p\\u003E\\n\\n\\u003Col\\u003E\\n\\u003Cli\\u003ETraverse my intricate tree structure, building up a collection of edge and node records.\\u003C/li\\u003E\\n\\u003Cli\\u003ESerialize those edges and nodes into a string in the DOT language that GraphViz wants, something like\\u00a0\\u0026quot;digraph{4 -\\u0026gt; 2; 4 -\\u0026gt; 5; 2 -\\u0026gt; 1; 2 -\\u0026gt; 3; 5 -\\u0026gt; 6; 5 -\\u0026gt; 7}\\u0026quot; for the simple case above.\\u003C/li\\u003E\\n\\u003Cli\\u003EPass that string to Graphviz to draw the graph.\\u003C/li\\u003E\\n\\u003C/ol\\u003E\\n\\n\\u003Cp\\u003E--------\\u003C/p\\u003E\\n\\n\\u003Cp\\u003ESo, do you folks have any suggestions about how to approach this topic of tree visualization?\\u003C/p\\u003E\\n\\u003C/div\\u003E\\u003C!-- SC_ON --\\u003E\", \"likes\": null, \"suggested_sort\": null, \"banned_at_utc\": null, \"view_count\": null, \"archived\": false, \"no_follow\": false, \"is_crosspostable\": true, \"pinned\": false, \"over_18\": false, \"all_awardings\": [], \"awarders\": [], \"media_only\": false, \"can_gild\": true, \"spoiler\": false, \"locked\": false, \"author_flair_text\": null, \"treatment_tags\": [], \"visited\": false, \"removed_by\": null, \"num_reports\": null, \"distinguished\": null, \"subreddit_id\": \"t5_2qh60\", \"mod_reason_by\": null, \"removal_reason\": null, \"link_flair_background_color\": \"\", \"id\": \"hle3h4\", \"is_robot_indexable\": true, \"num_duplicates\": 0, \"report_reasons\": null, \"author\": \"danysdragons\", \"discussion_type\": null, \"num_comments\": 8, \"send_replies\": true, \"media\": null, \"contest_mode\": false, \"author_patreon_flair\": false, \"author_flair_text_color\": null, \"permalink\": \"/r/ocaml/comments/hle3h4/ocaml_is_superbly_suited_to_defining_and/\", \"whitelist_status\": \"all_ads\", \"stickied\": false, \"url\": \"https://www.reddit.com/r/ocaml/comments/hle3h4/ocaml_is_superbly_suited_to_defining_and/\", \"subreddit_subscribers\": 7551, \"created_utc\": 1593910677.0, \"num_crossposts\": 0, \"mod_reports\": [], \"is_video\": false}}], \"after\": null, \"before\": null}}, {\"kind\": \"Listing\", \"data\": {\"modhash\": null, \"dist\": null, \"children\": [{\"kind\": \"t1\", \"data\": {\"total_awards_received\": 0, \"approved_at_utc\": null, \"ups\": 11, \"awarders\": [], \"mod_reason_by\": null, \"banned_by\": null, \"author_flair_type\": \"text\", \"removal_reason\": null, \"link_id\": \"t3_hle3h4\", \"author_flair_template_id\": null, \"likes\": null, \"replies\": \"\", \"user_reports\": [], \"saved\": false, \"id\": \"fwzc1p0\", \"banned_at_utc\": null, \"mod_reason_title\": null, \"gilded\": 0, \"archived\": false, \"no_follow\": false, \"author\": \"Drup_\", \"can_mod_post\": false, \"send_replies\": true, \"parent_id\": \"t3_hle3h4\", \"score\": 11, \"author_fullname\": \"t2_64hbjh4e\", \"report_reasons\": null, \"approved_by\": null, \"all_awardings\": [], \"subreddit_id\": \"t5_2qh60\", \"body\": \"- Textual/HTML pretty printing: https://github.com/c-cube/printbox/\\n- Visual printing: https://github.com/Drup/tree_layout\\n- For more complicated contexts (DAGs, notably), you can jump to ocamlgraph (http://ocamlgraph.lri.fr/index.en.html) directly, which has a GraphViz output.\\n\\nThat should cover most of it. All those libraries are in opam.\\n\\nFinally, if you want to contribute new implementation to visualize trees, here's your paradise: https://treevis.net/\", \"edited\": false, \"downs\": 0, \"author_flair_css_class\": null, \"is_submitter\": false, \"collapsed\": false, \"author_flair_richtext\": [], \"author_patreon_flair\": false, \"body_html\": \"\\u003Cdiv class=\\\"md\\\"\\u003E\\u003Cul\\u003E\\n\\u003Cli\\u003ETextual/HTML pretty printing: \\u003Ca href=\\\"https://github.com/c-cube/printbox/\\\"\\u003Ehttps://github.com/c-cube/printbox/\\u003C/a\\u003E\\u003C/li\\u003E\\n\\u003Cli\\u003EVisual printing: \\u003Ca href=\\\"https://github.com/Drup/tree_layout\\\"\\u003Ehttps://github.com/Drup/tree_layout\\u003C/a\\u003E\\u003C/li\\u003E\\n\\u003Cli\\u003EFor more complicated contexts (DAGs, notably), you can jump to ocamlgraph (\\u003Ca href=\\\"http://ocamlgraph.lri.fr/index.en.html\\\"\\u003Ehttp://ocamlgraph.lri.fr/index.en.html\\u003C/a\\u003E) directly, which has a GraphViz output.\\u003C/li\\u003E\\n\\u003C/ul\\u003E\\n\\n\\u003Cp\\u003EThat should cover most of it. All those libraries are in opam.\\u003C/p\\u003E\\n\\n\\u003Cp\\u003EFinally, if you want to contribute new implementation to visualize trees, here\\u0026#39;s your paradise: \\u003Ca href=\\\"https://treevis.net/\\\"\\u003Ehttps://treevis.net/\\u003C/a\\u003E\\u003C/p\\u003E\\n\\u003C/div\\u003E\", \"gildings\": {}, \"collapsed_reason\": null, \"associated_award\": null, \"stickied\": false, \"author_premium\": false, \"subreddit_type\": \"public\", \"can_gild\": true, \"top_awarded_type\": null, \"author_flair_text_color\": null, \"score_hidden\": false, \"permalink\": \"/r/ocaml/comments/hle3h4/ocaml_is_superbly_suited_to_defining_and/fwzc1p0/\", \"num_reports\": null, \"locked\": false, \"name\": \"t1_fwzc1p0\", \"created\": 1593965523.0, \"subreddit\": \"ocaml\", \"author_flair_text\": null, \"treatment_tags\": [], \"created_utc\": 1593936723.0, \"subreddit_name_prefixed\": \"r/ocaml\", \"controversiality\": 0, \"depth\": 0, \"author_flair_background_color\": null, \"collapsed_because_crowd_control\": null, \"mod_reports\": [], \"mod_note\": null, \"distinguished\": null}}, {\"kind\": \"t1\", \"data\": {\"total_awards_received\": 0, \"approved_at_utc\": null, \"ups\": 9, \"awarders\": [], \"mod_reason_by\": null, \"banned_by\": null, \"author_flair_type\": \"text\", \"removal_reason\": null, \"link_id\": \"t3_hle3h4\", \"author_flair_template_id\": null, \"likes\": null, \"replies\": {\"kind\": \"Listing\", \"data\": {\"modhash\": null, \"dist\": null, \"children\": [{\"kind\": \"t1\", \"data\": {\"total_awards_received\": 0, \"approved_at_utc\": null, \"ups\": 3, \"awarders\": [], \"mod_reason_by\": null, \"banned_by\": null, \"author_flair_type\": \"text\", \"removal_reason\": null, \"link_id\": \"t3_hle3h4\", \"author_flair_template_id\": null, \"likes\": null, \"replies\": {\"kind\": \"Listing\", \"data\": {\"modhash\": null, \"dist\": null, \"children\": [{\"kind\": \"t1\", \"data\": {\"total_awards_received\": 0, \"approved_at_utc\": null, \"ups\": 5, \"awarders\": [], \"mod_reason_by\": null, \"banned_by\": null, \"author_flair_type\": \"text\", \"removal_reason\": null, \"link_id\": \"t3_hle3h4\", \"author_flair_template_id\": null, \"likes\": true, \"replies\": {\"kind\": \"Listing\", \"data\": {\"modhash\": null, \"dist\": null, \"children\": [{\"kind\": \"t1\", \"data\": {\"total_awards_received\": 0, \"approved_at_utc\": null, \"ups\": 1, \"awarders\": [], \"mod_reason_by\": null, \"banned_by\": null, \"author_flair_type\": \"text\", \"removal_reason\": null, \"link_id\": \"t3_hle3h4\", \"author_flair_template_id\": null, \"likes\": null, \"replies\": \"\", \"user_reports\": [], \"saved\": false, \"id\": \"fx1pdip\", \"banned_at_utc\": null, \"mod_reason_title\": null, \"gilded\": 0, \"archived\": false, \"no_follow\": true, \"author\": \"danysdragons\", \"can_mod_post\": false, \"send_replies\": true, \"parent_id\": \"t1_fx0u1qg\", \"score\": 1, \"author_fullname\": \"t2_36453\", \"report_reasons\": null, \"approved_by\": null, \"all_awardings\": [], \"subreddit_id\": \"t5_2qh60\", \"body\": \"Yep, that works, thanks!\\n\\nAnd yes, my interest in the article was more about learning about the larger topic of ppx - I agree that it's not that helpful for understanding existing ppx plugins.\", \"edited\": false, \"downs\": 0, \"author_flair_css_class\": null, \"is_submitter\": true, \"collapsed\": false, \"author_flair_richtext\": [], \"author_patreon_flair\": false, \"body_html\": \"\\u003Cdiv class=\\\"md\\\"\\u003E\\u003Cp\\u003EYep, that works, thanks!\\u003C/p\\u003E\\n\\n\\u003Cp\\u003EAnd yes, my interest in the article was more about learning about the larger topic of ppx - I agree that it\\u0026#39;s not that helpful for understanding existing ppx plugins.\\u003C/p\\u003E\\n\\u003C/div\\u003E\", \"gildings\": {}, \"collapsed_reason\": null, \"associated_award\": null, \"stickied\": false, \"author_premium\": false, \"subreddit_type\": \"public\", \"can_gild\": true, \"top_awarded_type\": null, \"author_flair_text_color\": null, \"score_hidden\": false, \"permalink\": \"/r/ocaml/comments/hle3h4/ocaml_is_superbly_suited_to_defining_and/fx1pdip/\", \"num_reports\": null, \"locked\": false, \"name\": \"t1_fx1pdip\", \"created\": 1594020793.0, \"subreddit\": \"ocaml\", \"author_flair_text\": null, \"treatment_tags\": [], \"created_utc\": 1593991993.0, \"subreddit_name_prefixed\": \"r/ocaml\", \"controversiality\": 0, \"depth\": 3, \"author_flair_background_color\": null, \"collapsed_because_crowd_control\": null, \"mod_reports\": [], \"mod_note\": null, \"distinguished\": null}}], \"after\": null, \"before\": null}}, \"user_reports\": [], \"saved\": false, \"id\": \"fx0u1qg\", \"banned_at_utc\": null, \"mod_reason_title\": null, \"gilded\": 0, \"archived\": false, \"no_follow\": false, \"author\": \"L72_Elite_Kraken\", \"can_mod_post\": false, \"created_utc\": 1593975043.0, \"send_replies\": true, \"parent_id\": \"t1_fx0mhpx\", \"score\": 5, \"author_fullname\": \"t2_16r83m\", \"report_reasons\": null, \"approved_by\": null, \"all_awardings\": [], \"subreddit_id\": \"t5_2qh60\", \"body\": \"It looks like that article is more about implementing ppx rewriters, which is probably not too important if you just want to use show. (Though it can certainly be interesting as a topic in its own right, and it illuminates some things about OCaml's syntax.)\\n\\nTo use your `show_poly_tree` with an `int poly_tree`, you should be able to call `show_poly_tree Format.pp_print_int`.\", \"edited\": false, \"author_flair_css_class\": null, \"is_submitter\": false, \"downs\": 0, \"author_flair_richtext\": [], \"author_patreon_flair\": false, \"body_html\": \"\\u003Cdiv class=\\\"md\\\"\\u003E\\u003Cp\\u003EIt looks like that article is more about implementing ppx rewriters, which is probably not too important if you just want to use show. (Though it can certainly be interesting as a topic in its own right, and it illuminates some things about OCaml\\u0026#39;s syntax.)\\u003C/p\\u003E\\n\\n\\u003Cp\\u003ETo use your \\u003Ccode\\u003Eshow_poly_tree\\u003C/code\\u003E with an \\u003Ccode\\u003Eint poly_tree\\u003C/code\\u003E, you should be able to call \\u003Ccode\\u003Eshow_poly_tree Format.pp_print_int\\u003C/code\\u003E.\\u003C/p\\u003E\\n\\u003C/div\\u003E\", \"gildings\": {}, \"collapsed_reason\": null, \"associated_award\": null, \"stickied\": false, \"author_premium\": false, \"subreddit_type\": \"public\", \"can_gild\": false, \"top_awarded_type\": null, \"author_flair_text_color\": null, \"score_hidden\": false, \"permalink\": \"/r/ocaml/comments/hle3h4/ocaml_is_superbly_suited_to_defining_and/fx0u1qg/\", \"num_reports\": null, \"locked\": false, \"name\": \"t1_fx0u1qg\", \"created\": 1594003843.0, \"subreddit\": \"ocaml\", \"author_flair_text\": null, \"treatment_tags\": [], \"rte_mode\": \"markdown\", \"collapsed\": false, \"subreddit_name_prefixed\": \"r/ocaml\", \"controversiality\": 0, \"depth\": 2, \"author_flair_background_color\": null, \"collapsed_because_crowd_control\": null, \"mod_reports\": [], \"mod_note\": null, \"distinguished\": null}}], \"after\": null, \"before\": null}}, \"user_reports\": [], \"saved\": false, \"id\": \"fx0mhpx\", \"banned_at_utc\": null, \"mod_reason_title\": null, \"gilded\": 0, \"archived\": false, \"no_follow\": true, \"author\": \"danysdragons\", \"can_mod_post\": false, \"send_replies\": true, \"parent_id\": \"t1_fwyhq4w\", \"score\": 3, \"author_fullname\": \"t2_36453\", \"report_reasons\": null, \"approved_by\": null, \"all_awardings\": [], \"subreddit_id\": \"t5_2qh60\", \"collapsed\": false, \"body\": \"Thanks, this looks like a promising approach, and I really do need to learn more about ppx in general! \\n\\nIt does seem a bit trickier to handle polymorphic types this way. When I used my original polymorphic tree type, the ppx-generated function looked like:\\n\\n    val show_poly_tree :(Format.formatter -\\u003E 'a -\\u003E unit) -\\u003E 'a poly_tree -\\u003E string \\n\\nWhen I created an alternative tree type just for int, the ppx-generated function looked like:\\n\\n    val show_int_tree : int_tree -\\u003E string \\n\\nThe *show\\\\_int\\\\_tree* function worked flawlessly, but I'll have to do some more reading up on ppx. In addition to the links you gave me, this one looks pretty-comprehensive: [https://tarides.com/blog/2019-05-09-an-introduction-to-ocaml-ppx-ecosystem](https://tarides.com/blog/2019-05-09-an-introduction-to-ocaml-ppx-ecosystem)\\n\\nIt's too bad the ppx sections in Real World OCaml are still a work-in-progress. That book, along with the online [online textbook from the Cornell course](https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/), have been my favorite resources so far.\", \"edited\": false, \"author_flair_css_class\": null, \"is_submitter\": true, \"downs\": 0, \"author_flair_richtext\": [], \"author_patreon_flair\": false, \"body_html\": \"\\u003Cdiv class=\\\"md\\\"\\u003E\\u003Cp\\u003EThanks, this looks like a promising approach, and I really do need to learn more about ppx in general! \\u003C/p\\u003E\\n\\n\\u003Cp\\u003EIt does seem a bit trickier to handle polymorphic types this way. When I used my original polymorphic tree type, the ppx-generated function looked like:\\u003C/p\\u003E\\n\\n\\u003Cpre\\u003E\\u003Ccode\\u003Eval show_poly_tree :(Format.formatter -\\u0026gt; \\u0026#39;a -\\u0026gt; unit) -\\u0026gt; \\u0026#39;a poly_tree -\\u0026gt; string \\n\\u003C/code\\u003E\\u003C/pre\\u003E\\n\\n\\u003Cp\\u003EWhen I created an alternative tree type just for int, the ppx-generated function looked like:\\u003C/p\\u003E\\n\\n\\u003Cpre\\u003E\\u003Ccode\\u003Eval show_int_tree : int_tree -\\u0026gt; string \\n\\u003C/code\\u003E\\u003C/pre\\u003E\\n\\n\\u003Cp\\u003EThe \\u003Cem\\u003Eshow_int_tree\\u003C/em\\u003E function worked flawlessly, but I\\u0026#39;ll have to do some more reading up on ppx. In addition to the links you gave me, this one looks pretty-comprehensive: \\u003Ca href=\\\"https://tarides.com/blog/2019-05-09-an-introduction-to-ocaml-ppx-ecosystem\\\"\\u003Ehttps://tarides.com/blog/2019-05-09-an-introduction-to-ocaml-ppx-ecosystem\\u003C/a\\u003E\\u003C/p\\u003E\\n\\n\\u003Cp\\u003EIt\\u0026#39;s too bad the ppx sections in Real World OCaml are still a work-in-progress. That book, along with the online \\u003Ca href=\\\"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/\\\"\\u003Eonline textbook from the Cornell course\\u003C/a\\u003E, have been my favorite resources so far.\\u003C/p\\u003E\\n\\u003C/div\\u003E\", \"gildings\": {}, \"collapsed_reason\": null, \"associated_award\": null, \"stickied\": false, \"author_premium\": false, \"subreddit_type\": \"public\", \"can_gild\": true, \"top_awarded_type\": null, \"author_flair_text_color\": null, \"score_hidden\": false, \"permalink\": \"/r/ocaml/comments/hle3h4/ocaml_is_superbly_suited_to_defining_and/fx0mhpx/\", \"num_reports\": null, \"locked\": false, \"name\": \"t1_fx0mhpx\", \"created\": 1593999855.0, \"subreddit\": \"ocaml\", \"author_flair_text\": null, \"treatment_tags\": [], \"created_utc\": 1593971055.0, \"subreddit_name_prefixed\": \"r/ocaml\", \"controversiality\": 0, \"depth\": 1, \"author_flair_background_color\": null, \"collapsed_because_crowd_control\": null, \"mod_reports\": [], \"mod_note\": null, \"distinguished\": null}}], \"after\": null, \"before\": null}}, \"user_reports\": [], \"saved\": false, \"id\": \"fwyhq4w\", \"banned_at_utc\": null, \"mod_reason_title\": null, \"gilded\": 0, \"archived\": false, \"no_follow\": true, \"author\": \"-rid-\", \"can_mod_post\": false, \"send_replies\": true, \"parent_id\": \"t3_hle3h4\", \"score\": 9, \"author_fullname\": \"t2_5wi2wilm\", \"report_reasons\": null, \"approved_by\": null, \"all_awardings\": [], \"subreddit_id\": \"t5_2qh60\", \"body\": \"Did you try [https://github.com/ocaml-ppx/ppx\\\\_deriving](https://github.com/ocaml-ppx/ppx_deriving)  (plugin show)?\\n\\nExamples:  [https://github.com/ocaml-ppx/ppx\\\\_deriving/blob/master/src\\\\_examples/print\\\\_test.ml](https://github.com/ocaml-ppx/ppx_deriving/blob/master/src_examples/print_test.ml) and [https://medium.com/cryptosense-tech/how-to-get-the-best-out-of-ppx-deriving-fcb29c76dcc0](https://medium.com/cryptosense-tech/how-to-get-the-best-out-of-ppx-deriving-fcb29c76dcc0)\", \"edited\": 1593912242.0, \"downs\": 0, \"author_flair_css_class\": null, \"is_submitter\": false, \"collapsed\": false, \"author_flair_richtext\": [], \"author_patreon_flair\": false, \"body_html\": \"\\u003Cdiv class=\\\"md\\\"\\u003E\\u003Cp\\u003EDid you try \\u003Ca href=\\\"https://github.com/ocaml-ppx/ppx_deriving\\\"\\u003Ehttps://github.com/ocaml-ppx/ppx_deriving\\u003C/a\\u003E  (plugin show)?\\u003C/p\\u003E\\n\\n\\u003Cp\\u003EExamples:  \\u003Ca href=\\\"https://github.com/ocaml-ppx/ppx_deriving/blob/master/src_examples/print_test.ml\\\"\\u003Ehttps://github.com/ocaml-ppx/ppx_deriving/blob/master/src_examples/print_test.ml\\u003C/a\\u003E and \\u003Ca href=\\\"https://medium.com/cryptosense-tech/how-to-get-the-best-out-of-ppx-deriving-fcb29c76dcc0\\\"\\u003Ehttps://medium.com/cryptosense-tech/how-to-get-the-best-out-of-ppx-deriving-fcb29c76dcc0\\u003C/a\\u003E\\u003C/p\\u003E\\n\\u003C/div\\u003E\", \"gildings\": {}, \"collapsed_reason\": null, \"associated_award\": null, \"stickied\": false, \"author_premium\": false, \"subreddit_type\": \"public\", \"can_gild\": true, \"top_awarded_type\": null, \"author_flair_text_color\": null, \"score_hidden\": false, \"permalink\": \"/r/ocaml/comments/hle3h4/ocaml_is_superbly_suited_to_defining_and/fwyhq4w/\", \"num_reports\": null, \"locked\": false, \"name\": \"t1_fwyhq4w\", \"created\": 1593940800.0, \"subreddit\": \"ocaml\", \"author_flair_text\": null, \"treatment_tags\": [], \"created_utc\": 1593912000.0, \"subreddit_name_prefixed\": \"r/ocaml\", \"controversiality\": 0, \"depth\": 0, \"author_flair_background_color\": null, \"collapsed_because_crowd_control\": null, \"mod_reports\": [], \"mod_note\": null, \"distinguished\": null}}, {\"kind\": \"t1\", \"data\": {\"total_awards_received\": 0, \"approved_at_utc\": null, \"ups\": 6, \"awarders\": [], \"mod_reason_by\": null, \"banned_by\": null, \"author_flair_type\": \"text\", \"removal_reason\": null, \"link_id\": \"t3_hle3h4\", \"author_flair_template_id\": null, \"likes\": null, \"replies\": \"\", \"user_reports\": [], \"saved\": false, \"id\": \"fx0b16n\", \"banned_at_utc\": null, \"mod_reason_title\": null, \"gilded\": 0, \"archived\": false, \"no_follow\": true, \"author\": \"RevelBeats\", \"can_mod_post\": false, \"send_replies\": true, \"parent_id\": \"t3_hle3h4\", \"score\": 6, \"author_fullname\": \"t2_6jpd9ev5\", \"report_reasons\": null, \"approved_by\": null, \"all_awardings\": [], \"subreddit_id\": \"t5_2qh60\", \"body\": \"Let's look at the REPL pretty printing issue.\\n \\nYou have 2 problems:\\n\\n## format your data in a suitable way\\n\\nThis can be achieved by writing your own formatting function. It is advisable to rely on the existing printing framework contained in the `Format` module. You could use a so-called ppx extension to automatically derive a printer for your type (it's been mentioned in other comments), but I don't know how far you may customize it to your liking.\\n\\nThe formatting function should have a relatively simple signature of the form:\\n\\n    val print_tree : (fmt -\\u003E 'a -\\u003E unit) -\\u003E fmt -\\u003E 'a tree -\\u003E unit\\n\\nwhere `fmt` is an alias I made up for the `Format.formatter` type, which I don't want to spell out all the time, so either define explicitely that type in your code, or replace it everywhere in this comment by the real type name.\\n\\n I suggest having a look at the module documentation for a quick recall. The function body probably should look like:\\n\\n    let print_tree print_a fmt = \\n      let pf = Format.fprintf in\\n      let rec print_tree fmt = function\\n        Leaf               -\\u003E pf fmt \\\"Leaf\\\"\\n       | Node (x, l, r) -\\u003E pf fmt \\\"@[\\u003Cv\\u003ENode(%a,%a,%a)@]\\\" print_a x print_tree l print_tree r\\n      in print_tree fmt\\n\\nThis code may not be exactly what you want - It might even not compile, I didn't test it - but it should give you a rough idea.\\n\\n## have the repl use that formatting\\n\\nThis is a bit tricky: there's a `#install_printer` directive in the REPL which let one set a pretty printer up for values of a given type. This directive accepts a formatting function with type `fmt -\\u003E t -\\u003E unit`, where `t` is a monomorphic type. That means that you may only have a printer installed for a specific instance of your tree type constructor. The important thing to remember is that this directive is a convenience for the REPL, not a feature you should rely on for production code, so it should be fine for casual uses.\\n\\nSo in your example, the `test_tree` value as type `int tree`, and thus you'd have to do something like:\\n\\n    #install_printer (print_tree Format.pp_print_int);;\\n\\nto get it to print with the formatting function defined above.\\n\\nUpdate: I tried the code above and it compiles.\", \"edited\": 1594462800.0, \"downs\": 0, \"author_flair_css_class\": null, \"is_submitter\": false, \"collapsed\": false, \"author_flair_richtext\": [], \"author_patreon_flair\": false, \"body_html\": \"\\u003Cdiv class=\\\"md\\\"\\u003E\\u003Cp\\u003ELet\\u0026#39;s look at the REPL pretty printing issue.\\u003C/p\\u003E\\n\\n\\u003Cp\\u003EYou have 2 problems:\\u003C/p\\u003E\\n\\n\\u003Ch2\\u003Eformat your data in a suitable way\\u003C/h2\\u003E\\n\\n\\u003Cp\\u003EThis can be achieved by writing your own formatting function. It is advisable to rely on the existing printing framework contained in the \\u003Ccode\\u003EFormat\\u003C/code\\u003E module. You could use a so-called ppx extension to automatically derive a printer for your type (it\\u0026#39;s been mentioned in other comments), but I don\\u0026#39;t know how far you may customize it to your liking.\\u003C/p\\u003E\\n\\n\\u003Cp\\u003EThe formatting function should have a relatively simple signature of the form:\\u003C/p\\u003E\\n\\n\\u003Cpre\\u003E\\u003Ccode\\u003Eval print_tree : (fmt -\\u0026gt; \\u0026#39;a -\\u0026gt; unit) -\\u0026gt; fmt -\\u0026gt; \\u0026#39;a tree -\\u0026gt; unit\\n\\u003C/code\\u003E\\u003C/pre\\u003E\\n\\n\\u003Cp\\u003Ewhere \\u003Ccode\\u003Efmt\\u003C/code\\u003E is an alias I made up for the \\u003Ccode\\u003EFormat.formatter\\u003C/code\\u003E type, which I don\\u0026#39;t want to spell out all the time, so either define explicitely that type in your code, or replace it everywhere in this comment by the real type name.\\u003C/p\\u003E\\n\\n\\u003Cp\\u003EI suggest having a look at the module documentation for a quick recall. The function body probably should look like:\\u003C/p\\u003E\\n\\n\\u003Cpre\\u003E\\u003Ccode\\u003Elet print_tree print_a fmt = \\n  let pf = Format.fprintf in\\n  let rec print_tree fmt = function\\n    Leaf               -\\u0026gt; pf fmt \\u0026quot;Leaf\\u0026quot;\\n   | Node (x, l, r) -\\u0026gt; pf fmt \\u0026quot;@[\\u0026lt;v\\u0026gt;Node(%a,%a,%a)@]\\u0026quot; print_a x print_tree l print_tree r\\n  in print_tree fmt\\n\\u003C/code\\u003E\\u003C/pre\\u003E\\n\\n\\u003Cp\\u003EThis code may not be exactly what you want - It might even not compile, I didn\\u0026#39;t test it - but it should give you a rough idea.\\u003C/p\\u003E\\n\\n\\u003Ch2\\u003Ehave the repl use that formatting\\u003C/h2\\u003E\\n\\n\\u003Cp\\u003EThis is a bit tricky: there\\u0026#39;s a \\u003Ccode\\u003E#install_printer\\u003C/code\\u003E directive in the REPL which let one set a pretty printer up for values of a given type. This directive accepts a formatting function with type \\u003Ccode\\u003Efmt -\\u0026gt; t -\\u0026gt; unit\\u003C/code\\u003E, where \\u003Ccode\\u003Et\\u003C/code\\u003E is a monomorphic type. That means that you may only have a printer installed for a specific instance of your tree type constructor. The important thing to remember is that this directive is a convenience for the REPL, not a feature you should rely on for production code, so it should be fine for casual uses.\\u003C/p\\u003E\\n\\n\\u003Cp\\u003ESo in your example, the \\u003Ccode\\u003Etest_tree\\u003C/code\\u003E value as type \\u003Ccode\\u003Eint tree\\u003C/code\\u003E, and thus you\\u0026#39;d have to do something like:\\u003C/p\\u003E\\n\\n\\u003Cpre\\u003E\\u003Ccode\\u003E#install_printer (print_tree Format.pp_print_int);;\\n\\u003C/code\\u003E\\u003C/pre\\u003E\\n\\n\\u003Cp\\u003Eto get it to print with the formatting function defined above.\\u003C/p\\u003E\\n\\n\\u003Cp\\u003EUpdate: I tried the code above and it compiles.\\u003C/p\\u003E\\n\\u003C/div\\u003E\", \"gildings\": {}, \"collapsed_reason\": null, \"associated_award\": null, \"stickied\": false, \"author_premium\": false, \"subreddit_type\": \"public\", \"can_gild\": true, \"top_awarded_type\": null, \"author_flair_text_color\": null, \"score_hidden\": false, \"permalink\": \"/r/ocaml/comments/hle3h4/ocaml_is_superbly_suited_to_defining_and/fx0b16n/\", \"num_reports\": null, \"locked\": false, \"name\": \"t1_fx0b16n\", \"created\": 1593993762.0, \"subreddit\": \"ocaml\", \"author_flair_text\": null, \"treatment_tags\": [], \"created_utc\": 1593964962.0, \"subreddit_name_prefixed\": \"r/ocaml\", \"controversiality\": 0, \"depth\": 0, \"author_flair_background_color\": null, \"collapsed_because_crowd_control\": null, \"mod_reports\": [], \"mod_note\": null, \"distinguished\": null}}, {\"kind\": \"t1\", \"data\": {\"total_awards_received\": 0, \"approved_at_utc\": null, \"ups\": 3, \"awarders\": [], \"mod_reason_by\": null, \"banned_by\": null, \"author_flair_type\": \"text\", \"removal_reason\": null, \"link_id\": \"t3_hle3h4\", \"author_flair_template_id\": null, \"likes\": null, \"replies\": \"\", \"user_reports\": [], \"saved\": false, \"id\": \"fwyngvf\", \"banned_at_utc\": null, \"mod_reason_title\": null, \"gilded\": 0, \"archived\": false, \"no_follow\": true, \"author\": \"runvnc\", \"can_mod_post\": false, \"send_replies\": true, \"parent_id\": \"t3_hle3h4\", \"score\": 3, \"author_fullname\": \"t2_57eit\", \"report_reasons\": null, \"approved_by\": null, \"all_awardings\": [], \"subreddit_id\": \"t5_2qh60\", \"body\": \"You would think there would be a library or something.  I didn't find one with a quick google search, but I did find an answer on Stack Overflow for you:\\n\\n[https://stackoverflow.com/questions/39737889/in-order-traversal-in-bst-ocaml](https://stackoverflow.com/questions/39737889/in-order-traversal-in-bst-ocaml)\\n\\nSo just add a printf or something to that aux function.\", \"edited\": false, \"downs\": 0, \"author_flair_css_class\": null, \"is_submitter\": false, \"collapsed\": false, \"author_flair_richtext\": [], \"author_patreon_flair\": false, \"body_html\": \"\\u003Cdiv class=\\\"md\\\"\\u003E\\u003Cp\\u003EYou would think there would be a library or something.  I didn\\u0026#39;t find one with a quick google search, but I did find an answer on Stack Overflow for you:\\u003C/p\\u003E\\n\\n\\u003Cp\\u003E\\u003Ca href=\\\"https://stackoverflow.com/questions/39737889/in-order-traversal-in-bst-ocaml\\\"\\u003Ehttps://stackoverflow.com/questions/39737889/in-order-traversal-in-bst-ocaml\\u003C/a\\u003E\\u003C/p\\u003E\\n\\n\\u003Cp\\u003ESo just add a printf or something to that aux function.\\u003C/p\\u003E\\n\\u003C/div\\u003E\", \"gildings\": {}, \"collapsed_reason\": null, \"associated_award\": null, \"stickied\": false, \"author_premium\": false, \"subreddit_type\": \"public\", \"can_gild\": true, \"top_awarded_type\": null, \"author_flair_text_color\": null, \"score_hidden\": false, \"permalink\": \"/r/ocaml/comments/hle3h4/ocaml_is_superbly_suited_to_defining_and/fwyngvf/\", \"num_reports\": null, \"locked\": false, \"name\": \"t1_fwyngvf\", \"created\": 1593944900.0, \"subreddit\": \"ocaml\", \"author_flair_text\": null, \"treatment_tags\": [], \"created_utc\": 1593916100.0, \"subreddit_name_prefixed\": \"r/ocaml\", \"controversiality\": 0, \"depth\": 0, \"author_flair_background_color\": null, \"collapsed_because_crowd_control\": null, \"mod_reports\": [], \"mod_note\": null, \"distinguished\": null}}, {\"kind\": \"t1\", \"data\": {\"total_awards_received\": 0, \"approved_at_utc\": null, \"ups\": 1, \"awarders\": [], \"mod_reason_by\": null, \"banned_by\": null, \"author_flair_type\": \"text\", \"removal_reason\": null, \"link_id\": \"t3_hle3h4\", \"author_flair_template_id\": null, \"likes\": null, \"replies\": \"\", \"user_reports\": [], \"saved\": false, \"id\": \"fxi86ic\", \"banned_at_utc\": null, \"mod_reason_title\": null, \"gilded\": 0, \"archived\": false, \"no_follow\": true, \"author\": \"Aldor\", \"can_mod_post\": false, \"send_replies\": true, \"parent_id\": \"t3_hle3h4\", \"score\": 1, \"author_fullname\": \"t2_77lfk\", \"report_reasons\": null, \"approved_by\": null, \"all_awardings\": [], \"subreddit_id\": \"t5_2qh60\", \"body\": \"Why would you need anything besides ppx_sexp_conv :\\\\^)\", \"edited\": false, \"downs\": 0, \"author_flair_css_class\": null, \"is_submitter\": false, \"collapsed\": false, \"author_flair_richtext\": [], \"author_patreon_flair\": false, \"body_html\": \"\\u003Cdiv class=\\\"md\\\"\\u003E\\u003Cp\\u003EWhy would you need anything besides ppx_sexp_conv :^)\\u003C/p\\u003E\\n\\u003C/div\\u003E\", \"gildings\": {}, \"collapsed_reason\": null, \"associated_award\": null, \"stickied\": false, \"author_premium\": true, \"subreddit_type\": \"public\", \"can_gild\": true, \"top_awarded_type\": null, \"author_flair_text_color\": null, \"score_hidden\": false, \"permalink\": \"/r/ocaml/comments/hle3h4/ocaml_is_superbly_suited_to_defining_and/fxi86ic/\", \"num_reports\": null, \"locked\": false, \"name\": \"t1_fxi86ic\", \"created\": 1594390602.0, \"subreddit\": \"ocaml\", \"author_flair_text\": null, \"treatment_tags\": [], \"created_utc\": 1594361802.0, \"subreddit_name_prefixed\": \"r/ocaml\", \"controversiality\": 0, \"depth\": 0, \"author_flair_background_color\": null, \"collapsed_because_crowd_control\": null, \"mod_reports\": [], \"mod_note\": null, \"distinguished\": null}}], \"after\": null, \"before\": null}}]")))((request(Get(uri https://oauth.reddit.com/api/info?raw_json=1&id=t1_fwzc1p0)(headers((authorization"bearer <ACCESS_TOKEN>")))))(response(((encoding(Fixed 3117))(headers((accept-ranges bytes)(cache-control"private, s-maxage=0, max-age=0, must-revalidate, no-store, max-age=0, must-revalidate")(connection keep-alive)(content-length 3117)(content-type"application/json; charset=UTF-8")(date"Sun, 23 Aug 2020 13:09:07 GMT")(expires -1)(server snooserv)(set-cookie"session_tracker=cnnnqpldnbplrklpdk.0.1598188147453.Z0FBQUFBQmZRbXB6YmtmbVRFR1dRUnQ2eG5manhRcEtzejRjNThnMlFYNnh4UDB1VXNfN0JWYjJyODV0dGRXZFZORGs3VE5UYkRya1FlS3hPSWNWZFB2andLVzVZTVJDMjhMSkF3UFkyaHd3MjZhaVQwNkNyN2RsNUZDNFBjWWtGcVF1RmFrQWdTQ2g; Domain=reddit.com; Max-Age=7199; Path=/; expires=Sun, 23-Aug-2020 15:09:07 GMT; secure; SameSite=None; Secure")(set-cookie"redesign_optout=true; Domain=reddit.com; Max-Age=94607999; Path=/; expires=Wed, 23-Aug-2023 13:09:07 GMT; secure")(set-cookie"csv=1; Max-Age=63072000; Domain=.reddit.com; Path=/; Secure; SameSite=None")(set-cookie"edgebucket=3sDUqQJ7G2GkCCbOI1; Domain=reddit.com; Max-Age=63071999; Path=/;  secure")(strict-transport-security"max-age=15552000; includeSubDomains; preload")(vary accept-encoding)(via"1.1 varnish")(x-content-type-options nosniff)(x-frame-options SAMEORIGIN)(x-moose majestic)(x-ratelimit-remaining 598.0)(x-ratelimit-reset 53)(x-ratelimit-used 2)(x-ua-compatible IE=edge)(x-xss-protection"1; mode=block")))(version HTTP_1_1)(status OK)(flush false))"{\"kind\": \"Listing\", \"data\": {\"modhash\": null, \"dist\": 1, \"children\": [{\"kind\": \"t1\", \"data\": {\"total_awards_received\": 0, \"approved_at_utc\": null, \"edited\": false, \"mod_reason_by\": null, \"banned_by\": null, \"author_flair_type\": \"text\", \"removal_reason\": null, \"link_id\": \"t3_hle3h4\", \"author_flair_template_id\": null, \"likes\": null, \"replies\": \"\", \"user_reports\": [], \"saved\": false, \"id\": \"fwzc1p0\", \"banned_at_utc\": null, \"mod_reason_title\": null, \"gilded\": 0, \"archived\": false, \"no_follow\": false, \"author\": \"Drup_\", \"can_mod_post\": false, \"created_utc\": 1593936723.0, \"send_replies\": true, \"parent_id\": \"t3_hle3h4\", \"score\": 12, \"author_fullname\": \"t2_64hbjh4e\", \"approved_by\": null, \"mod_note\": null, \"all_awardings\": [], \"subreddit_id\": \"t5_2qh60\", \"body\": \"- Textual/HTML pretty printing: https://github.com/c-cube/printbox/\\n- Visual printing: https://github.com/Drup/tree_layout\\n- For more complicated contexts (DAGs, notably), you can jump to ocamlgraph (http://ocamlgraph.lri.fr/index.en.html) directly, which has a GraphViz output.\\n\\nThat should cover most of it. All those libraries are in opam.\\n\\nFinally, if you want to contribute new implementation to visualize trees, here's your paradise: https://treevis.net/\", \"awarders\": [], \"author_flair_css_class\": null, \"name\": \"t1_fwzc1p0\", \"author_patreon_flair\": false, \"downs\": 0, \"author_flair_richtext\": [], \"is_submitter\": false, \"body_html\": \"\\u003Cdiv class=\\\"md\\\"\\u003E\\u003Cul\\u003E\\n\\u003Cli\\u003ETextual/HTML pretty printing: \\u003Ca href=\\\"https://github.com/c-cube/printbox/\\\"\\u003Ehttps://github.com/c-cube/printbox/\\u003C/a\\u003E\\u003C/li\\u003E\\n\\u003Cli\\u003EVisual printing: \\u003Ca href=\\\"https://github.com/Drup/tree_layout\\\"\\u003Ehttps://github.com/Drup/tree_layout\\u003C/a\\u003E\\u003C/li\\u003E\\n\\u003Cli\\u003EFor more complicated contexts (DAGs, notably), you can jump to ocamlgraph (\\u003Ca href=\\\"http://ocamlgraph.lri.fr/index.en.html\\\"\\u003Ehttp://ocamlgraph.lri.fr/index.en.html\\u003C/a\\u003E) directly, which has a GraphViz output.\\u003C/li\\u003E\\n\\u003C/ul\\u003E\\n\\n\\u003Cp\\u003EThat should cover most of it. All those libraries are in opam.\\u003C/p\\u003E\\n\\n\\u003Cp\\u003EFinally, if you want to contribute new implementation to visualize trees, here\\u0026#39;s your paradise: \\u003Ca href=\\\"https://treevis.net/\\\"\\u003Ehttps://treevis.net/\\u003C/a\\u003E\\u003C/p\\u003E\\n\\u003C/div\\u003E\", \"gildings\": {}, \"collapsed_reason\": null, \"distinguished\": null, \"associated_award\": null, \"stickied\": false, \"author_premium\": false, \"can_gild\": true, \"top_awarded_type\": null, \"author_flair_text_color\": null, \"score_hidden\": false, \"permalink\": \"/r/ocaml/comments/hle3h4/ocaml_is_superbly_suited_to_defining_and/fwzc1p0/\", \"num_reports\": null, \"locked\": false, \"report_reasons\": null, \"created\": 1593965523.0, \"subreddit\": \"ocaml\", \"author_flair_text\": null, \"treatment_tags\": [], \"collapsed\": false, \"subreddit_name_prefixed\": \"r/ocaml\", \"controversiality\": 0, \"author_flair_background_color\": null, \"collapsed_because_crowd_control\": null, \"mod_reports\": [], \"subreddit_type\": \"public\", \"ups\": 12}}], \"after\": null, \"before\": null}}")))